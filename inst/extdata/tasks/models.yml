# Managing multi-task jobs

# Basic approach:
# Every job gets one line in the main remake file. Multi-task jobs also get
# their own remake files, disconnected from the main one except in that the
# separate file generates a single output when the job is complete

# include:

packages:
  - scipiper

sources:
  - model.R

file_extensions: ["ind","rds"]

target_default: models_tsv_st

targets:

  # ideally:
  # 
  # 1) models.tsv would get updated every time we made a modeling batch attempt,
  # possibly at the end of a batch run or even a few times (manually?) during
  # the run, but probably not in parallel by many jobs (to avoid conflicts).
  # This can be done by only running models_tsv_st locally (not in a cluster job, anyway)
  # and having it break after creating the status file every time until the entire batch
  # has been successfully completed
  # 
  # 2) the attempt would keep going on some models even if others failed.
  # This can be done by running each site as a target in a separate remake
  # instance on a separate cluster job.
  #
  # 3) The attempts would cease, and the main remake pipeline would have confident
  # access to the status table, only when all models have finished successfully. This is
  # done by making models_tsv_st the target called by the parent makefile, and having that
  # target break every time until the run is completely successful.

  # The summarization function used here could check the remake status of the intermediate
  # targets for each site (AK_dat, AK_mod.rds, and AK_mod_st), which could probably be
  # automated in scipiper - the user declares the desired milestones when they
  # construct this yml, by virtue of choosing the target names and commands such that
  # an intermediate or final target isn't created (errors first) unless it's successful.
  # This target doesn't declare dependencies on AK_mod_st, etc., because we want to be
  # able to run it and create 'models.tsv' and 'models.tsv.ind'. But summarize_models_and_post
  # should break after creating those files unless every site or model is complete, so
  # that this target remains unbuilt in remake's eyes until we're actually done updating it.
  models_tsv_st:
    command: summarize_models_and_post('models.yml', I('models.tsv.ind'))

  # XX_dat is the input data relevant to site XX; if data-getting fails, files may be created but get_model_inputs stops on error
  # XX_mod.rds is the model output for site XX; if model fails, files may be created but run_model stops on error
  # XX_mod_st is created iff XX has been successfully posted; otherwise, post_model stops on error.
  #   Because we'll summarize and share it in models_success.ind, it can be an unversioned object rather than a file to version
  # The commands used by these targets are project-specifc and would be provided in the call to create_task_makefile(), along
  # with the vector of target name prefixes (AK, AZ, CO). It makes sense to break them up because the processing could fail
  # at any one of these steps and would only need to fall back to the previous step rather than starting from scratch. However,
  # only XX_mod_st should be saved and shared among computers (via models_tsv_success=models.tsv), because if you had to
  # restart a job 2/3 through (at retrying posting) on another computer, it wouldn't have XX_dat or XX_mod.rds stored locally
  # so would genuinely need to recreate those before trying to post. So sharing the remake status data without sharing those
  # files would be misleading and would break things.
  
  AK_dat:
    command: get_model_inputs(target_name)
  AK_mod.rds:
    command: run_model(AK_dat)
  AK_mod_st:
    command: post_model("AK_mod.rds") # probably calls create_indicator. if successful, might even delete AK_mod.rds if space is scarce

  AZ_dat:
    command: get_model_data(target_name)
  AZ_mod.rds:
    command: run_model(AZ_dat)
  AZ_mod_st:
    command: post_model("AZ_mod.rds")
    
  CO_dat:
    command: get_model_data(target_name)
  CO_mod.rds:
    command: run_model(CO_dat)
  CO_mod_st:
    command: post_model("CO_mod.rds")
