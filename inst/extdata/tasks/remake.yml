# Managing multi-task jobs

# Basic approach:
# Every job gets one line in the main remake file. Multi-task jobs also get
# their own remake files, disconnected from the main one except in that the
# separate file generates a single output when the job is complete

# include:

packages:
  - scipiper

sources:
  - demo.R

file_extensions: ["ind","cache"] # in addition to remake::file_extensions()

target_default: models.tsv

targets:
  
  # project
  
  sites:
    packages: yaml
    command: yaml.load(I("[AK,AZ,CO]"))
  
  models.yml:
    command: create_task_makefile(target_name, sites)

  # The key to this multi-task job is that the models.tsv.ind
  # command appeals to a decoupled makefile, 'models.yml', which is created by this makefile
  # but never `include`d. The target has a name other than 'models.tsv.ind' because if both
  # makefiles defined a target of the same name, they could overwrite the same .remake
  # database item.
  # As usual for cache sharing, files stored in the cache (models.tsv) only depend on their
  # own indicator files, and only retrieve themselves from the cache, while the indicator
  # file target (models.tsv.ind) does the heavy lifting. 
  models.tsv.ind:
    command: scmake(I('models_tsv_ind'), remake_file='models.yml')
  models.tsv:
    command: get_cached_file('models.tsv.ind')
  # An alternative for no cache sharing (but why/when would you do that?) would be the following:
  # models.tsv:
  #   command: scmake(I('models_tsv_ind'), remake_file='models.yml')
