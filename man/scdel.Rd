% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scmake.R
\name{scdel}
\alias{scdel}
\title{Wrapper for remake::delete that permits cache sharing}
\usage{
scdel(
  target_names = NULL,
  remake_file = getOption("scipiper.remake_file"),
  verbose = TRUE,
  ind_ext = getOption("scipiper.ind_ext")
)
}
\arguments{
\item{target_names}{vector of targets to delete, or NULL to delete the
default target. Use the output of \code{list_all_targets()} to delete all
explicitly named targets in the remake file (excluding tidy, clean, and
purge)}

\item{remake_file}{as in \code{\link[remake:delete]{remake::delete()}}}

\item{verbose}{as in \code{\link[remake:delete]{remake::delete()}}}

\item{ind_ext}{the indicator file extension identifying those files for which
build/status information will be deleted if their targets are
remake::deleted. You should git commit the deletion of any build/status
files (unless you immediately rebuild them and commit any changes instead).}
}
\description{
\code{\link[remake:delete]{remake::delete()}} claims that for files you can generally just delete the
file itself with no need to call remake::delete(). This may also be the case
for a shared cache; especially for non-status-indicator files (which have no
build status file) however, it seems cleaner to delete the build status files
at the same time that one deletes an indicator file.
}
\details{
The option to set \code{dependencies=TRUE} for \code{\link[remake:delete]{remake::delete()}} is omitted
because it sounds terrifying to me: as currently implemented in remake,
dependencies are the UPSTREAM targets on which the current target_names
depend - i.e., if B is built from A and you ask to delete B with
dependencies=TRUE, A will also be deleted. Scary, right? So let's not.
}
\examples{
\dontrun{
scdel('one_target', 'remake.yml')
scdel(NULL, 'remake.yml') # delete the default target
scdel(list_all_targets('remake.yml'), 'remake.yml')
}
}
