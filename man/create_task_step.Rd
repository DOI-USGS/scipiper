% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_task_step.R
\name{create_task_step}
\alias{create_task_step}
\title{Create an object that defines a step within a task}
\usage{
create_task_step(step_name, target_name = function(task_name, step_name, ...)
  {     sprintf("\%s_\%s", task_name, step_name) }, depends = character(0),
  command = function(task_name, step_name, ...) {     sprintf("\%s('\%s')",
  step_name, task_name) })
}
\arguments{
\item{step_name}{a single character string naming this step. The default
\code{target_name} combines this \code{step_name} with the \code{task_name}, and the
default \code{command} assumes this \code{step_name} is the function name, but both
defaults may be overridden (see next arguments)}

\item{target_name}{a character string or vector, or a function that produces
a character string or vector, giving a unique name for the remake target
for a specific application of this step to a specific task. If a function,
should accept \code{...} and other args optionally including \code{task_name} and
\code{step_name}}

\item{depends}{a character string or vector, or a function that produces a
character string or vector, defining any dependencies that need to be
declared in addition to those implied by \code{command}. If a function, should
accept \code{...} and other args optionally including \code{task_name}, \code{step_name},
and \code{target_name} args optionally including \code{task_name} and \code{step_name}}

\item{command}{a character string or vector, or a function that produces a
character string or vector, defining the command to be run for each
application of this step to a specific task. If a function, should accept
\code{...} and other args optionally including \code{task_name}, \code{step_name},
\code{target_name}, and \code{depends}}
}
\description{
The default values of each parameter are often acceptable, but all parameters
may be overridden. When constructing the task makefile or table, the
\code{target_name}, \code{depends}, and \code{command} elements are built in that order,
with each element optionally depending on the result of the previous
elements. They can also depend on the \code{step_name} (defined in this function
call) and/or the \code{task_name} (to be listed in a call to \code{create_task_plan()},
where the definitions declared here will ultimately be evaluated)
}
\examples{
create_task_step(
  'plot',
  target_name=function(task_name, step_name, ...) {
    sprintf('~/MyProjects/thisproject/\%s_\%s.png', task_name, step_name)
  },
  command='plot_site(target_name)'
)
}
