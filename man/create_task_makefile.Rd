% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_task_makefile.R
\name{create_task_makefile}
\alias{create_task_makefile}
\title{Create a .yml makefile for a multi-task job}
\usage{
create_task_makefile(task_plan, makefile = NULL, include = c(),
  packages = c(), sources = c(), file_extensions = c("ind"),
  ind_dir = attr(task_plan, "ind_dir"),
  ind_ext = getOption("scipiper.ind_ext"),
  template_file = system.file("extdata/task_makefile.mustache", package =
  "scipiper"))
}
\arguments{
\item{task_plan}{a task plan as produced by \code{create_task_plan()}}

\item{makefile}{character name of the remake file to create}

\item{include}{character vector of any remake .yml files to include within
this one. If any files must be quoted in the remake file, quote them with
inner single quotes, e.g. \code{c("unquoted", "'quoted file name.tsv'")}}

\item{packages}{character vector of any packages to load before running steps}

\item{sources}{character vector of any files that should be sourced before
running steps. If any files must be quoted in the remake file, quote them
with inner single quotes, e.g. \code{c("unquoted", "'quoted file name.tsv'")}}

\item{file_extensions}{character vector of file extensions to be added to the
defaults at \code{remake::file_extensions()}. Inclusion of \code{'ind'} is
recommended because this indicator file extension is commonly used by
scipiper.}

\item{ind_dir}{directory path specifing the location where an overall job
indicator file should be written once all tasks and steps are complete.
This file will always be named after the makefile, but with the indicator
file extension (ind_ext) instead of '.yml' as a suffix}

\item{ind_ext}{the indicator file extension to use in creating the job
indicator file}

\item{template_file}{character name of the mustache template to render into
\code{makefile}. The default is recommended}
}
\value{
the file name of the makefile that was created (can be displayed with
\code{cat(readLines(makefile), sep="\n")}).
}
\description{
Create a .yml makefile (for use with remake or scipiper) for a set of tasks
that together form a single job.  The default target will be named after
\code{makefile} (specifically,
\code{indicatorfile=tools::file_path_sans_ext(basename(makefile))}) and can be
evoked from another remake file as
\code{make(I('indicatorfile'),remake_file='thismakefile.yml')} after replacing
\code{indicatorfile} and \code{thismakefile.yml} with their values.
}
\examples{
task_config <- data.frame(
  id=c('AZ','CO','CA'),
  capital=c('Phoeniz','Denver','Sacramento')
)
step1 <- create_task_step(
  step_name = 'prep',
  target = function(task_name, step_name, ...) {
    sprintf('\%s_\%s', task_name, step_name)
  },
  depends = c('A','B'),
  command = "process(target_name, I('C'))"
)
step2 <- create_task_step(
  step_name = 'plot',
  command = function(target_name, task_name, ...) {
    capital <- task_config[task_config$id == task_name, 'capital']
    sprintf('visualize(\\'\%s\\', \\'\%s\\')', task_name, capital)
  }
)
step3 <- create_task_step('report')
task_plan <- create_task_plan(c('AZ','CA','CO'), list(step1, step2, step3),
  final_steps='report', ind_dir='states/log')
task_makefile <- create_task_makefile(
  task_plan, makefile=file.path(tempdir(), 'states.yml'),
  file_extensions=c('ind'), packages='mda.streams')
cat(readLines(task_makefile), sep='\\n')
}
